
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.barfuin.gradle.jacocolog:gradle-jacoco-log:${jacocoLogVersion}"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version "$shadowVersion"
    id 'java'
    id 'java-library'
}

apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'org.barfuin.gradle.jacocolog'

apply from: "${rootProject.projectDir}/gradle/config/scripts/idea.gradle"
apply from: "${rootProject.projectDir}/gradle/config/scripts/style.gradle"
apply from: "${rootProject.projectDir}/gradle/config/scripts/coverage.gradle"

repositories {
    mavenCentral()
}

group = "$group"
version = "$projectVersion"
description = 'flink-etl'
java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

shadowJar {
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    dependencies {
        exclude(dependency('org.apache.flink:force-shading'))
        exclude(dependency('com.google.code.findbugs:jsr305'))
        exclude(dependency('org.slf4j:slf4j-log4j13'))
        exclude(dependency('log4j:log4j'))
        exclude(dependency('log4j:apache-log4j-extras'))
    }

    // Keep services files and their list of implementation classes.
    mergeServiceFiles()

    manifest {
        attributes 'Main-Class': 'software.aws.solution.clickstream.flink.StreamingJob'
    }
}

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.xml"]

dependencies {
    api "com.amazonaws:aws-kinesisanalytics-runtime:$kdaRuntimeVersion"
    api "org.apache.flink:flink-connector-kinesis:$flinkVersion"
    api "org.apache.flink:flink-connector-aws-kinesis-streams:$flinkVersion"
    api "org.apache.flink:flink-streaming-java:$flinkVersion"
    api "org.apache.flink:flink-clients:$flinkVersion"
    api "software.amazon.awssdk:bom:$awsSdkVersion"
    api "software.amazon.awssdk:s3:$awsSdkVersion"
//    compileOnly "org.apache.flink:flink-streaming-java:$flinkVersion"
//    compileOnly "org.apache.flink:flink-clients:$flinkVersion"
    testImplementation "org.apache.flink:flink-runtime:$flinkVersion"
    testImplementation "org.apache.flink:flink-test-utils:$flinkVersion"
    testImplementation "org.apache.flink:flink-test-utils-junit:$flinkVersion"

    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    // Use JUnit Jupiter for testing.
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"

    // This dependency is used by the application.
    implementation "com.google.guava:guava:$guavaVersion"

    // For Ip to Geo.
    implementation "com.maxmind.db:maxmind-db:$maxmindDbVersion"

    // For UA.
    implementation "com.github.ua-parser:uap-java:$uapJavaVersion"

    // lombok related.
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    testCompileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")

    // test related
    testImplementation("org.assertj:assertj-core:$assertJVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events = ['passed', 'skipped', 'failed', 'standardOut', 'standardError']
    }
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "1024m" // maximum heap size
    jvmArgs '-XX:MaxPermSize=1024m' // mem argument for the test JVM
}

application {
    // Define the main class for the application.
    mainClass = 'software.aws.solution.clickstream.flink.StreamingJob'
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
